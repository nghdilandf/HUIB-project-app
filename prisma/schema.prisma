// This is your Prisma schema file for MySQL
// Define your data models below

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  username    String
  password    String
  role        String   // 'user' | 'admin'
  orders      Order[]
  reviews     Review[]
  messages    Message[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  details     String?
  price       Float
  photo       String?
  orders      OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          Int      @id @default(autoincrement())
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  quickOrder  Boolean  @default(false)
  tableNumber String?  // For quick orders
  status      String   // 'pending' | 'preparing' | 'completed' | 'cancelled'
  items       OrderItem[]
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payment     Payment?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  content   String
  rating    Int
  createdAt DateTime @default(now())
}

model Message {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  from      String   // 'user' | 'admin'
  content   String
  reply     String?
  createdAt DateTime @default(now())
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Payment {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int      @unique
  amount    Float
  status    String   // 'pending' | 'paid' | 'failed'
  createdAt DateTime @default(now())
}
